'use strict';
// написати функцію суми 2 аргументів

function sum (a, b) { // Function Declaration
    return a + b;
}

const sumArrow = (a ,b) => { // Arrow Function
    return a + b;
}

// Якщо функція виконує ОДНУ дію (щось повертає , return/ Ми можемо опустити слово return і прибрати фігурні дужки)
const sumArrowVariant2 = (a ,b) => a + b;


//Задача: Написати функцію, яка приймає число і зводить його у квадрат


// Коли у нас тільки один аргумент ми навіть можемо опустити круглі дужки
const pow = number => number ** 2;   // pow - ступінь числа

// АЛЕ, якщо функція не приймає аргументів взагалі, то круглі дужки ОБОВʼЯЗКОВІ ().


//ФУНКЦІЯ КОНСТРУКТОР

const SuperFunc = () => {
    this.value = 'hello'; 
}

/*this - вказує на глобальну область видимості,не має свого контексту виконання, 
тому не може бути використана у функціях конструкторах, не може бути стрілочною

arguments - псевдомасив з аргументами , які ми передаємо нашій функції при виклику
У стрілкової функції не має arguments */

const t1 = function () { //Function expression
console.log(arguments);

}
// const t2 = () => { //Cтрілочні функції не мають arguments , якщо викликати t2 буде помилка
//     console.log(arguments);
//     }


t1('hello','world','!!!')

/* Особливості стрілочних функцій:

 1. Стрілочна функція не має свого власного контексту виконання
    ( вона буде завжди брати найближчий доступний , до якого зможе дістатися)
 2. Не може бути функцією конструктором.
 3. Не має колекції arguments */