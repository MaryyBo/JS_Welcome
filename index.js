//ЛОГІЧНІ операції 
//Працювати ці оператори будуть з логічним типом даних - boolean)

const a = true;

// ОПЕРАТОР "!" - заперечення
// ми інвентируємо те значеня яке там було на протилежне, якщо там було true то вона стане false
!a; // false
 
// console.log(!a); було true стало false

// ОПЕРАТОР "!!" - подвійне заперечення (Дуже рідко використовується)
!!a

// console.log(!!a); //повертає початкове значення 

// АБО замість подвійноого заперечення використ КОНСТРУКТОР

// console.log(Boolean(1)); //Явне приведення до типу Boolean

//----------------------------------------------------------

// Визначити чи щось одне більше/менше за інше

const result = 4 > 5; //false
const result2 = 7 < 9; //true

//----------------------------------------------------------

//Кожен символ має унікальний код!!! Unicode Table - кодування символів
//ПОРІВНЯННЯ рядків

const result3 = 'a' > 'A'; // 'a' маленьке більше ніж 'A' велике, тому що, підставляється числовий код з Unicode таблиці
console.log(result3);

const result4 = 'b' < 'u'; // 'b' код - 62 у  'u' - 75 тому відповідь - true
console.log(result4);

const result5 = 'test' > 'word'; //Порівнюватися слова будуть за 1 літерами слова t=74 > w=77 відповідь - false
console.log(result5);

//якщо 1 букви співпадають, тоді по 2й букві вираховується
//----------------------------------------------------------


//ПЕРЕВІРКА РІВНОСТІ ЧИСЕЛ "=="

const result6 = 5 == 6; //false
console.log(result6);

const result7 = 6 == 6;//true
console.log(result7);

//"==" - ПОГАНА ПРАКТИКА, так як приводить операнди до одного типу даних і потім порівнює

const result8 = '9' == 9; //true
console.log(result8);

// Натомість використовують "==="  РЕКОМЕНДУЄТЬСЯ так як порівнює і за значенням і за типом даних. 

const result9 = '9' === 9; //false
console.log(result9);

const result11 = 9 === 9; //true
console.log(result11);

//ПЕРЕВІРКИ БІЛЬШЕ-або-ДОРІВНЮЄ або МЕНШЕ-або-ДОРІВНЮЄ

const result12 = 3 >= 3; //true
console.log(result12);

const result13 = 6 <= 7; //true
console.log(result13);











